package visao;

import controle.ClienteDAO;
import java.awt.Color;
import java.awt.Component;
import java.awt.Frame;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import modelo.*;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import validacao.ValidaCNPJ;
import validacao.ValidaCPF;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author osmar
 */
public class JDialogInserirCliente extends javax.swing.JDialog {

    Cliente cliente = new Cliente();
    ClienteDAO controle = new ClienteDAO();
    ArrayList<Cliente> listaClientes = new ArrayList<>();
    boolean valida;
    DecimalFormat fd = new DecimalFormat("#,###.00");
    SimpleDateFormat formatarData = new SimpleDateFormat("dd/MM/yyyy");
     String vazio = "0.0";

    /**
     * Creates new form JDialogInsCliente
     */
    public JDialogInserirCliente(Frame frame, boolean bln, Cliente cliente) {

        super(frame, bln);

        initComponents();

        formatadoCPF.setEnabled(false);
        if (cliente == null) {
            liberarCampos(true);
            comboEstado.setSelectedIndex(24);
        } else {
            comboEstado.setSelectedItem(cliente.getCliEstado());
            txtNome.setText(cliente.getCliNome());
            txtBairro.setText(cliente.getCliBairro());
            formatadoCep.setText(cliente.getCliCep());
            txtCidade.setText(cliente.getCliCidade());
            txtEmail.setText(cliente.getCliEmail());
            txtLogradouro.setText(cliente.getCliLogradouro());
            txtNum.setText(cliente.getCliNumero());
            formatoTelefone.setText(cliente.getCliTelefone());
            /*try {
                    formatadoCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###.###/####-##")));
                } catch (ParseException ex) {
                    Logger.getLogger(JDialogInserirCliente.class.getName()).log(Level.SEVERE, null, ex);
                }
            */
            try {
                try{
                formatadoData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
                } catch (ParseException ex) {
                    Logger.getLogger(JDialogInserirCliente.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (formatadoData.getText().isEmpty()) {
                    cliente.setCliDataNasc(null);
                }
                formatadoData.setText(formatarData.format(cliente.getCliDataNasc()));

//                cliente.setCliDataNasc(conversaoDateString(formatadoData.getText()));
            } catch (Exception ex) {
                System.out.println("Cliente cadastrado sem data.");
            }
            
                formatadoLimite.setText(String.format("%s",(cliente.getCliLimite())).replace(".", ","));
//                formatadoLimite.setText(String.format("0"+"%s",fd.format(cliente.getCliLimite())));
                
            this.cliente.setCliCodcli(cliente.getCliCodcli());
            if (cliente.getCliTipo().equals("Fisica")) {
                radioPFisica.setSelected(true);
            } else {
                radioPJuridica.setSelected(true);
                try {
                    formatadoCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###.###/####-##")));
                } catch (ParseException ex) {
                    Logger.getLogger(JDialogInserirCliente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            formatadoCPF.setText(cliente.getCliCpfCnpj());

            liberarCampos(false);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        labTipoCliente = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        labDataNasc = new javax.swing.JLabel();
        labCPF = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        labLogradouro = new javax.swing.JLabel();
        txtLogradouro = new javax.swing.JTextField();
        labNum = new javax.swing.JLabel();
        txtNum = new javax.swing.JTextField();
        labBairro = new javax.swing.JLabel();
        txtBairro = new javax.swing.JTextField();
        labCidade = new javax.swing.JLabel();
        txtCidade = new javax.swing.JTextField();
        labEstado = new javax.swing.JLabel();
        comboEstado = new javax.swing.JComboBox<>();
        labCep = new javax.swing.JLabel();
        formatadoCep = new javax.swing.JFormattedTextField();
        labTelefone = new javax.swing.JLabel();
        formatoTelefone = new javax.swing.JFormattedTextField();
        labEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        labLimite = new javax.swing.JLabel();
        radioPFisica = new javax.swing.JRadioButton();
        radioPJuridica = new javax.swing.JRadioButton();
        formatadoLimite = new javax.swing.JFormattedTextField();
        formatadoCPF = new javax.swing.JFormattedTextField();
        formatadoData = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        botSalvar = new javax.swing.JButton();
        botExcluir = new javax.swing.JButton();
        botEditar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Cliente"));

        labTipoCliente.setText("Tipo:");

        jLabel1.setText("Nome:");

        labDataNasc.setText("Data de Nasc.:");

        labCPF.setText("CPF/ CNPJ:");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Endereço"));

        labLogradouro.setText("Logradouro:");

        labNum.setText("Nº:");

        labBairro.setText("Bairro:");

        labCidade.setText("Cidade:");

        labEstado.setText("Estado:");

        comboEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA", "MT", "MS", "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC", "SP", "SE", "TO" }));

        labCep.setText("CEP:");

        try {
            formatadoCep.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labEstado)
                    .addComponent(labBairro)
                    .addComponent(labLogradouro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtLogradouro)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labNum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNum, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBairro)
                            .addComponent(comboEstado, 0, 243, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labCidade)
                            .addComponent(labCep))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtCidade, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                            .addComponent(formatadoCep)))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labLogradouro)
                    .addComponent(txtLogradouro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labNum)
                    .addComponent(txtNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labCidade)
                    .addComponent(txtCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labBairro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labEstado)
                    .addComponent(comboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labCep)
                    .addComponent(formatadoCep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        labTelefone.setText("Telefone:");

        try {
            formatoTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)#####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        labEmail.setText("E-mail:");

        labLimite.setText("Limite de Crédito:");

        buttonGroup1.add(radioPFisica);
        radioPFisica.setText("Pessoa Física");
        radioPFisica.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioPFisicaMouseClicked(evt);
            }
        });
        radioPFisica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioPFisicaActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioPJuridica);
        radioPJuridica.setText("Pessoa Jurídica");
        radioPJuridica.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioPJuridicaMouseClicked(evt);
            }
        });
        radioPJuridica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioPJuridicaActionPerformed(evt);
            }
        });

        formatadoLimite.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));

        try {
            formatadoCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        formatadoCPF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                formatadoCPFFocusLost(evt);
            }
        });
        formatadoCPF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formatadoCPFKeyReleased(evt);
            }
        });

        try {
            formatadoData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        formatadoData.setToolTipText("");
        formatadoData.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                formatadoDataFocusLost(evt);
            }
        });

        jLabel4.setText("R$");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labLimite)
                    .addComponent(labTelefone))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(formatoTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labEmail)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtEmail))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(formatadoLimite, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNome)
                        .addGap(10, 10, 10))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(labDataNasc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(formatadoData, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(labTipoCliente)
                        .addGap(18, 18, 18)
                        .addComponent(radioPFisica)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(radioPJuridica)
                        .addGap(26, 26, 26)
                        .addComponent(labCPF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(formatadoCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formatadoCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labCPF)
                    .addComponent(labTipoCliente)
                    .addComponent(radioPFisica)
                    .addComponent(radioPJuridica))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labDataNasc)
                    .addComponent(formatadoData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labTelefone)
                    .addComponent(formatoTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labEmail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labLimite)
                    .addComponent(formatadoLimite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(20, 20, 20))
        );

        botSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/icons8-salvar-30.png"))); // NOI18N
        botSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botSalvarActionPerformed(evt);
            }
        });

        botExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/delete_remove_bin_icon-icons.com_72400.png"))); // NOI18N
        botExcluir.setPreferredSize(new java.awt.Dimension(63, 69));
        botExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botExcluirActionPerformed(evt);
            }
        });

        botEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/icons8-lápis-24.png"))); // NOI18N
        botEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botEditar)
                .addGap(31, 31, 31)
                .addComponent(botExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(botSalvar)
                .addGap(30, 30, 30))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(botSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(botEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 32, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    private void botSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botSalvarActionPerformed
        // TODO add your handling code here:
        /**
         * *********VALIDAÇÃO DATA **********
         */
        Date data = new Date(System.currentTimeMillis());
        System.out.println("data" + data + "" + formatadoData.getText());
//        if (this.valida == false) {

        if (radioPJuridica.isSelected()) {
            cliente.setCliTipo("Juridica");
            if (formatadoCPF.getText().length() == 18) {

                if (ValidaCNPJ.isCNPJ(formatadoCPF.getText())) {
                    System.out.println("Válido");
                } else {
                    JOptionPane.showMessageDialog(null, "Não preencheu o campo obrigatório: CNPJ.");

                    return;
                }

            }
        } else {
            cliente.setCliTipo("Fisica");
            if (formatadoCPF.getText().length() == 14) {

                if (ValidaCPF.isCPF(formatadoCPF.getText())) {
                    System.out.println("CPF Válido");
                } else {
                    JOptionPane.showMessageDialog(null, "Não preencheu o campo obrigatório: CPF.");
                    return;
                }

            }
//
        }

        if (txtNome.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Não preencheu o campo obrigatório: Nome.");
            return;
        }

//          JOptionPane.showMessageDialog(null,String.valueOf(cliente.getCliNome()));
        cliente.setCliNome(txtNome.getText());
        try {
            if (formatadoData.getText().isEmpty()) {
                cliente.setCliDataNasc(null);
            } else {
                Date novaData = new Date();
                novaData = formatarData.parse(formatadoData.getText());
                cliente.setCliDataNasc(novaData);
                formatadoData.setText(formatarData.format(cliente.getCliDataNasc()));
            }
        } catch (Exception ex) {
//            ex.printStackTrace();
            System.out.println("Cliente cadastrado sem data.");
        }
        cliente.setCliCpfCnpj(formatadoCPF.getText());
        cliente.setCliLogradouro(txtLogradouro.getText());
        cliente.setCliNumero(txtNum.getText());
        cliente.setCliBairro(txtBairro.getText());
        cliente.setCliCidade(txtCidade.getText());
        cliente.setCliEstado((String) comboEstado.getSelectedItem());
        cliente.setCliCep(formatadoCep.getText());
        cliente.setCliTelefone(formatoTelefone.getText());
        cliente.setCliEmail(txtEmail.getText());
        if (formatadoLimite.getText().isEmpty()) {
            String vazio = "0.0";
            cliente.setCliLimite(Float.parseFloat(vazio));
        } else {
            cliente.setCliLimite(Float.parseFloat(formatadoLimite.getText().replace(',', '.')));
        }

        cliente.setCliStatus("A");
        try {
            controle.salvarNovo(cliente);
            JOptionPane.showMessageDialog(null, "Cliente Salvo");
            dispose();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_botSalvarActionPerformed

    public void setCliente(Cliente cli) {
        if (cli.getCliTipo().equals("Fisica")) {
            radioPFisica.setSelected(true);
        } else {
            radioPJuridica.setSelected(true);
        }

        txtNome.setText(cli.getCliNome());

    }


    private void botExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botExcluirActionPerformed
        // TODO add your handling code here:
//
        liberarCampos(true);
        int resposta;
        resposta = JOptionPane.showConfirmDialog(rootPane, "Deseja realmente excluir?");
        if (resposta == JOptionPane.YES_OPTION) {

            controle.excluir(cliente);
            dispose();
        }

    }//GEN-LAST:event_botExcluirActionPerformed

    private void botEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botEditarActionPerformed
        // TODO add your handling code here:
        liberarCampos(true);

    }//GEN-LAST:event_botEditarActionPerformed

    private void liberarCampos(boolean a) {
        for (Component c : jPanel2.getComponents()) {
            if (c instanceof JTextField) {
                ((JTextField) c).setEditable(a);
            } else if (c instanceof JLabel) {

            } else {
                c.setEnabled(a);
            }

        }

        for (Component c : jPanel3.getComponents()) {
            if (c instanceof JTextField) {
                ((JTextField) c).setEditable(a);
            } else if (c instanceof JLabel) {

            } else {

                c.setEnabled(a);
            }
        }
        botSalvar.setEnabled(a);
        botEditar.setEnabled(!a);
        botExcluir.setEnabled(!a);

    }
    private void radioPFisicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioPFisicaActionPerformed
        // TODO add your handling code here:
        try {
            formatadoCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (ParseException ex) {
            Logger.getLogger(JDialogInserirCliente.class.getName()).log(Level.SEVERE, null, ex);
        }

//        System.out.println("Clicou");
    }//GEN-LAST:event_radioPFisicaActionPerformed

    private void radioPJuridicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioPJuridicaActionPerformed
        // TODO add your handling code here:
        try {
            formatadoCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###.###/####-##")));
        } catch (ParseException ex) {
            Logger.getLogger(JDialogInserirCliente.class.getName()).log(Level.SEVERE, null, ex);
        }

        System.out.println("Clicou");

    }//GEN-LAST:event_radioPJuridicaActionPerformed

    private void formatadoCPFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formatadoCPFKeyReleased
        // TODO add your handling code here:

        if (ValidaCPF.isCPF(formatadoCPF.getText()) || ValidaCNPJ.isCNPJ(formatadoCPF.getText())) {
            formatadoCPF.setBackground(Color.white);
        } else {
            formatadoCPF.setBackground(Color.red);
        }

    }//GEN-LAST:event_formatadoCPFKeyReleased

    private void formatadoCPFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formatadoCPFFocusLost
        // TODO add your handling code here:
        if (this.isShowing()) {
            if (radioPFisica.isSelected()) {
                cliente.setCliTipo("Fisica");

                if (ValidaCPF.isCPF(formatadoCPF.getText())) {
                    this.valida = true;
                    Cliente cliente1 = controle.consultarPorCPF(formatadoCPF.getText());
                    if (cliente1 != null) {
                        System.out.println("Cliente já cadastrado!");
                        int opcao = -1;
                        System.out.println("" + cliente1.getCliStatus());
                        if (cliente1.getCliStatus().equals("I")) {

                            opcao = JOptionPane.showConfirmDialog(this, "Deseja reativar o cliente?", "Cliente inativo", 0);
                        } else {
                            JOptionPane.showMessageDialog(this, "Já existe um cadastro para esse CPF.");
                            comboEstado.setSelectedItem(cliente1.getCliEstado());
                            txtNome.setText(cliente1.getCliNome());
                            txtBairro.setText(cliente1.getCliBairro());
                            formatadoCep.setText(cliente1.getCliCep());
                            txtCidade.setText(cliente1.getCliCidade());
                            txtEmail.setText(cliente1.getCliEmail());
                            txtLogradouro.setText(cliente1.getCliLogradouro());
                            txtNum.setText(cliente1.getCliNumero());
                            formatoTelefone.setText(cliente1.getCliTelefone());
                            try {
                                if (formatadoData.getText().isEmpty()) {
                                    cliente.setCliDataNasc(null);
                                }
                                formatadoData.setText(formatarData.format(cliente1.getCliDataNasc()));

                            } catch (Exception ex) {
                                System.out.println("Cliente cadastrado sem data.");
                            }

                            formatadoLimite.setText(String.format("%s", cliente1.getCliLimite()).replace(".", ","));
                            this.cliente.setCliCodcli(cliente1.getCliCodcli());
                            if (cliente1.getCliTipo().equals("Fisica")) {
                                radioPFisica.setSelected(true);
                            } else {
                                radioPJuridica.setSelected(true);
                                try {
                                    formatadoCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###.###/####-##")));
                                } catch (ParseException ex) {
                                    Logger.getLogger(JDialogInserirCliente.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            formatadoCPF.setText(cliente1.getCliCpfCnpj());
                            formatadoCPF.setBackground(Color.white);
                            txtNome.requestFocus();

                        }
                        System.out.println("AAAA" + cliente1.getCliStatus());
                        if (opcao == 0) {
                            comboEstado.setSelectedItem(cliente1.getCliEstado());
                            txtNome.setText(cliente1.getCliNome());
                            txtBairro.setText(cliente1.getCliBairro());
                            formatadoCep.setText(cliente1.getCliCep());
                            txtCidade.setText(cliente1.getCliCidade());
                            txtEmail.setText(cliente1.getCliEmail());
                            txtLogradouro.setText(cliente1.getCliLogradouro());
                            txtNum.setText(cliente1.getCliNumero());
                            formatoTelefone.setText(cliente1.getCliTelefone());
                            try {
                                if (formatadoData.getText().isEmpty()) {
                                    cliente.setCliDataNasc(null);
                                }
                                formatadoData.setText(formatarData.format(cliente1.getCliDataNasc()));

//                cliente.setCliDataNasc(conversaoDateString(formatadoData.getText()));
                            } catch (Exception ex) {
                                System.out.println("Cliente cadastrado sem data.");
                            }

                            formatadoLimite.setText(String.format("%s", cliente1.getCliLimite()).replace(".", ","));
                            this.cliente.setCliCodcli(cliente1.getCliCodcli());
                            if (cliente.getCliTipo().equals("Fisica")) {
                                radioPFisica.setSelected(true);
                            } else {
                                radioPJuridica.setSelected(true);
                                try {
                                    formatadoCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###.###/####-##")));
                                } catch (ParseException ex) {
                                    Logger.getLogger(JDialogInserirCliente.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            formatadoCPF.setText(cliente1.getCliCpfCnpj());
                            //alterei aqui
                            formatadoCPF.setText(cliente1.getCliCpfCnpj());
                            formatadoCPF.setBackground(Color.white);
                            txtNome.requestFocus();
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "CPF inválido!", null, JOptionPane.ERROR_MESSAGE);
                    formatadoCPF.setValue("");
//                formatadoCPF.requestFocus();

                    this.valida = false;
                }
            } else {
                cliente.setCliTipo("Juridica");
                if (ValidaCNPJ.isCNPJ(formatadoCPF.getText())) {
                    Cliente cliente1 = controle.consultarPorCNPJ(formatadoCPF.getText());
                    if (cliente1 != null) {
                        System.out.println("Cliente já cadastrado!");
                        int opcao = -1;
                        System.out.println("" + cliente1.getCliStatus());
                        if (cliente1.getCliStatus().equals("I")) {

                            opcao = JOptionPane.showConfirmDialog(this, "Deseja reativar o cliente?", "Cliente inativo", 0);
                        } else {
                            JOptionPane.showMessageDialog(this, "Cliente já cadastrado!");
                        }
                        System.out.println("AAAA" + cliente1.getCliStatus());
                        if (opcao == 0) {
                            comboEstado.setSelectedItem(cliente1.getCliEstado());
                            txtNome.setText(cliente1.getCliNome());
                            txtBairro.setText(cliente1.getCliBairro());
                            formatadoCep.setText(cliente1.getCliCep());
                            txtCidade.setText(cliente1.getCliCidade());
                            txtEmail.setText(cliente1.getCliEmail());
                            txtLogradouro.setText(cliente1.getCliLogradouro());
                            txtNum.setText(cliente1.getCliNumero());
                            formatoTelefone.setText(cliente1.getCliTelefone());
                            try {
                                if (formatadoData.getText().isEmpty()) {
                                    cliente.setCliDataNasc(null);
                                }
                                formatadoData.setText(formatarData.format(cliente1.getCliDataNasc()));

//                cliente.setCliDataNasc(conversaoDateString(formatadoData.getText()));
                            } catch (Exception ex) {
                                System.out.println("Cliente cadastrado sem data.");
                            }
                            formatadoLimite.setText(String.format("%s", cliente1.getCliLimite()));

                            this.cliente.setCliCodcli(cliente1.getCliCodcli());

                            if (cliente1.getCliTipo().equals("Fisica")) {
                                radioPFisica.setSelected(true);
                            } else {
                                radioPJuridica.setSelected(true);
                                try {
                                    formatadoCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###.###/####-##")));
                                } catch (ParseException ex) {
                                    Logger.getLogger(JDialogInserirCliente.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            formatadoCPF.setText(cliente1.getCliCpfCnpj());
                            //alterei aqui
                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "CNPJ inválido!", null, JOptionPane.ERROR_MESSAGE);
                    formatadoCPF.setValue("");
                }
            }
        }
    }//GEN-LAST:event_formatadoCPFFocusLost

    private void formatadoDataFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formatadoDataFocusLost
        // TODO add your handling code here:
        if (this.isShowing()) {
            if (formatadoData.getText().equals("  /  /    ")) {
                System.out.println("Entrou");
            } else if (!data(formatadoData.getText()) || !dataMenorQueHoje(formatadoData.getText())) {
                formatadoData.setValue("");
                System.out.println("DATA");

                JOptionPane.showMessageDialog(null, "Data inválida!", "Erro", JOptionPane.ERROR_MESSAGE);

//            formatadoData.requestFocus();
            }
        }


    }//GEN-LAST:event_formatadoDataFocusLost

    private void radioPFisicaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioPFisicaMouseClicked
        // TODO add your handling code here:
        formatadoCPF.setEnabled(true);
    }//GEN-LAST:event_radioPFisicaMouseClicked

    private void radioPJuridicaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioPJuridicaMouseClicked
        // TODO add your handling code here:
        formatadoCPF.setEnabled(true);
    }//GEN-LAST:event_radioPJuridicaMouseClicked

    public boolean data(String data) {
        boolean retorno = false;

        try {
            //SimpleDateFormat é usada para trabalhar com formatação de datas
            //neste caso meu formatador irá trabalhar com o formato "dd/MM/yyyy"
            //dd = dia, MM = mes, yyyy = ano
            //o "M" dessa String é maiusculo porque "m" minusculo se n me engano é minutos
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            //a mágica desse método acontece aqui, pois o setLenient() é usado para setar
            //sua escolha sobre datas estranhas, quando eu seto para "false" estou dizendo
            //que não aceito datas falsas como 31/02/2016
            sdf.setLenient(false);
            //aqui eu tento converter a String em um objeto do tipo date, se funcionar
            //sua data é valida
            sdf.parse(data);
            //se nada deu errado retorna true (verdadeiro)
            retorno = true;
        } catch (Exception ex) {
            //se algum passo dentro do "try" der errado quer dizer que sua data é falsa, então,
            //retorna falso
            retorno = false;
        }
        return retorno;
    }

    public boolean dataMenorQueHoje(String dataMenor) {
        //DateTimeFormatter tem uma função identica ao SimpleDateFormatter, mas escolhi usar ele
        //pois ele trabalha junto com o LocalDate que facilita muito trabalhar com datas
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        //Aqui eu converto uma data em LocalDate e digo que quero no formato do DateTimeFormatter
        //que criei acima
        LocalDate dataVerificada = LocalDate.parse(dataMenor, dtf);
        //Esse comando pega a data de hoje
        LocalDate hoje = LocalDate.now();
        //Se dataVerificada comparada com hoje é menor ou igual a zero então retorna verdadeiro,
        //senão, retorna falso
        // com LocalDate não tem como comparar assim: data1 < data2
        //Tem que ser assim: data1.compareTo(data2)
        //quando a data1 é menor isso retorna -1, quando é maior retorna 1, e quando é igual retorna 0
        //por isso eu comparei com <=0 abaixo
        return dataVerificada.compareTo(hoje) <= 0;
    }

    private Date conversaoDateString(String data) {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
//        SimpleDateFormat dateFormat2 = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss");
//        String data = formatadoData.getText();
        try {
            Date data1 = formato.parse(data);
//            Date data2 = new Date(System.currentTimeMillis());
//            data1.setMaxSelectableDate(data2);
            return data1;
        } catch (ParseException ex) {
            //Logger.getLogger(JDialogInserirCliente.class.getName()).log(Level.SEVERE, null, ex);
        }

        return null;
    }

    protected String converteData(java.util.Date dtData) {
        SimpleDateFormat formatBra;
        formatBra = new SimpleDateFormat("dd/MM/yyyy");
        try {
            java.util.Date newData = formatBra.parse(dtData.toString());
            return (formatBra.format(newData));
        } catch (ParseException Ex) {
            return "Erro na conversão da data";
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogInserirCliente.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogInserirCliente.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogInserirCliente.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogInserirCliente.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the dialog */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botEditar;
    private javax.swing.JButton botExcluir;
    private javax.swing.JButton botSalvar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> comboEstado;
    private javax.swing.JFormattedTextField formatadoCPF;
    private javax.swing.JFormattedTextField formatadoCep;
    private javax.swing.JFormattedTextField formatadoData;
    private javax.swing.JFormattedTextField formatadoLimite;
    private javax.swing.JFormattedTextField formatoTelefone;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel labBairro;
    private javax.swing.JLabel labCPF;
    private javax.swing.JLabel labCep;
    private javax.swing.JLabel labCidade;
    private javax.swing.JLabel labDataNasc;
    private javax.swing.JLabel labEmail;
    private javax.swing.JLabel labEstado;
    private javax.swing.JLabel labLimite;
    private javax.swing.JLabel labLogradouro;
    private javax.swing.JLabel labNum;
    private javax.swing.JLabel labTelefone;
    private javax.swing.JLabel labTipoCliente;
    private javax.swing.JRadioButton radioPFisica;
    private javax.swing.JRadioButton radioPJuridica;
    private javax.swing.JTextField txtBairro;
    private javax.swing.JTextField txtCidade;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtLogradouro;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtNum;
    // End of variables declaration//GEN-END:variables
}
