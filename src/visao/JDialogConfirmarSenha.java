/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visao;

import controle.UsuarioDAO;
import java.awt.Frame;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import modelo.Usuario;

/**
 *
 * @author osmar
 */
public class JDialogConfirmarSenha extends javax.swing.JDialog {

    private Usuario usuario = new Usuario();
    private UsuarioDAO controle = new UsuarioDAO();
    
    /**
     * Creates new form JDialogConfirmarSenha
     */
    public JDialogConfirmarSenha(Frame frame, boolean bln) {
        super(frame, bln);
        initComponents();
        labUsuario.setText(UsuarioDAO.usuarioLogado.getUsNome());
       
        
//        this.usuario =us;
    }
    private boolean vrfs = false;
    private Usuario usu = null;
    
    
    
      public Usuario getUsu() {
        return usu;
    }

    public void setUsu(Usuario usu) {
        this.usu = usu;
    }
    
    public boolean VerificaSenha(){
        return vrfs;
    }
    
    {System.out.println("usuario"+usuario); }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ConfirmarSenha = new javax.swing.JLabel();
        labNomeUsuario = new javax.swing.JLabel();
        passwordSenhaAtual = new javax.swing.JPasswordField();
        labUsuario = new javax.swing.JLabel();
        botConfirmar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        ConfirmarSenha.setText("Confirme sua senha:");

        labNomeUsuario.setText("Usuário:");

        passwordSenhaAtual.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                passwordSenhaAtualFocusLost(evt);
            }
        });
        passwordSenhaAtual.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                passwordSenhaAtualMouseReleased(evt);
            }
        });

        botConfirmar.setText("Confirmar");
        botConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botConfirmarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labNomeUsuario)
                                .addGap(18, 18, 18)
                                .addComponent(labUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ConfirmarSenha)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(passwordSenhaAtual, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(botConfirmar)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labNomeUsuario)
                    .addComponent(labUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConfirmarSenha)
                    .addComponent(passwordSenhaAtual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botConfirmar)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ConfirmarSenha, labNomeUsuario, labUsuario, passwordSenhaAtual});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void passwordSenhaAtualFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordSenhaAtualFocusLost
        // TODO add your handling code here:
//        String senha = passwordSenhaAtual.getText();
//
//        MessageDigest md;
//        try {
//            md = MessageDigest.getInstance("SHA-256");
//            try {
//                byte password[] = md.digest(senha.getBytes("UTF-8"));
//
//                StringBuilder hexString = new StringBuilder();
//                for (byte b : password) {
//                    hexString.append(String.format("%02X", 0xFF & b));
//                }
//                String senhahex = hexString.toString();
//                if (senhahex.equals(UsuarioDAO.usuarioLogado.getUsSenha())) {
//                    System.out.println("Entrou");
//                   JOptionPane.showMessageDialog(this, "Senha confirmada.");
//                   vrfs= true;
//                   dispose();
//
//                } else {
//                    JOptionPane.showMessageDialog(this, "Senha não confere.");
//                    passwordSenhaAtual.setText("");
//                    passwordSenhaAtual.requestFocus();
//
//                }
//                System.out.println(senhahex);
//            } catch (UnsupportedEncodingException ex) {
//                Logger.getLogger(JDialogConfirmarSenha.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            
//        } catch (NoSuchAlgorithmException ex) {
//            Logger.getLogger(JDialogConfirmarSenha.class.getName()).log(Level.SEVERE, null, ex);
//        }
////          

    }//GEN-LAST:event_passwordSenhaAtualFocusLost

    private void passwordSenhaAtualMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passwordSenhaAtualMouseReleased
        // TODO add your handling code here:
//        String senha = passwordSenhaAtual.getText();
//
//        MessageDigest md;
//        try {
//            md = MessageDigest.getInstance("SHA-256");
//            try {
//                byte password[] = md.digest(senha.getBytes("UTF-8"));
//
//                StringBuilder hexString = new StringBuilder();
//                for (byte b : password) {
//                    hexString.append(String.format("%02X", 0xFF & b));
//                }
//                String senhahex = hexString.toString();
//                if (senhahex.equals(usu.getUsSenha())) {
//                    System.out.println("senhas iguais");
//                    JOptionPane.showMessageDialog(this, "Senha confirmada.");
////                    passwordNovaSenha.setEnabled(true);
////                    passwordConfirmaNovaSenha.setEnabled(true);
//
//                } else {
//                    JOptionPane.showMessageDialog(this, "Senha não confere.");
//                    passwordSenhaAtual.setText(" ");
//                    passwordSenhaAtual.requestFocus();
//
//                }
//                System.out.println(senhahex);
//            } catch (UnsupportedEncodingException ex) {
//                Logger.getLogger(JDialogMudarSenha.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        } catch (NoSuchAlgorithmException ex) {
//            Logger.getLogger(JDialogMudarSenha.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_passwordSenhaAtualMouseReleased

    private void botConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botConfirmarActionPerformed
        // TODO add your handling code here:
        String senha = passwordSenhaAtual.getText();

        MessageDigest md;
        try {
            md = MessageDigest.getInstance("SHA-256");
            try {
                byte password[] = md.digest(senha.getBytes("UTF-8"));

                StringBuilder hexString = new StringBuilder();
                for (byte b : password) {
                    hexString.append(String.format("%02X", 0xFF & b));
                }
                String senhahex = hexString.toString();
                if (senhahex.equals(UsuarioDAO.usuarioLogado.getUsSenha())) {
                    System.out.println("Entrou");
                   vrfs= true;
                   dispose();

                } else {
                    JOptionPane.showMessageDialog(this, "Senha não confere.");
                    passwordSenhaAtual.setText("");
                    passwordSenhaAtual.requestFocus();

                }
                System.out.println(senhahex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(JDialogConfirmarSenha.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(JDialogConfirmarSenha.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_botConfirmarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogConfirmarSenha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogConfirmarSenha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogConfirmarSenha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogConfirmarSenha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new TelaPrincipalGerente().setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(JDialogConfirmarSenha.class.getName()).log(Level.SEVERE, null, ex);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ConfirmarSenha;
    private javax.swing.JButton botConfirmar;
    private javax.swing.JLabel labNomeUsuario;
    private javax.swing.JLabel labUsuario;
    private javax.swing.JPasswordField passwordSenhaAtual;
    // End of variables declaration//GEN-END:variables
}
